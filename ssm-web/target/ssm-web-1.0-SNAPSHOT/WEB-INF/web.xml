<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	 http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<display-name>data-management</display-name>

	<!--指定spring配置文件位置-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext-*.xml</param-value>
	</context-param>

	<!--配置ContextLoaderListener监听器，说明：
      1.ContextLoaderListener监听器，监听ServletContext对象的创建。一旦ServletContext对象创建，
      它立即帮助我们创建spring容器，并且放入ServletContext域中。
      2.该监听器，默认只能加载WEB-INF目录下，名称为applicationContext.xml的配置文件
      3.通过context-param标签，配置指定spring的配置文件位置，改变默认行为。
  	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--配置使用的字符集编码-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

		<!--指定使用的编码-->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<!--配置所有请求都经过字符集编码过滤器处理-->
		<url-pattern>/*</url-pattern>

	</filter-mapping>
	<!--配置spring security 过滤器,说明：
        1.细节：springSecurityFilterChain名称是固定写法
    -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<!--配置所有请求都进入security过滤器处理-->
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!--加载springmvc主配置文件-->
	<servlet>
		<servlet-name>data-management</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

	<!--加载springmvc主配置文件-->
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/springmvc.xml</param-value>
	</init-param>
	<!--配置什么时候加载前端控制器，说明：
      1.配置大于等于0的整数，表示在web容器启动的时候加载
      2.配置小于0的整数，表示在第一次请求到达的时候加载
    -->
	<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>data-management</servlet-name>
		<!--配置拦截的url规则，说明：
		1.*.do，表示以.do结尾的请求进入前端控制器
		2./，表示所有请求都进入前端控制器，支持restful
		-->
		<url-pattern>/</url-pattern>
	</servlet-mapping>


</web-app>